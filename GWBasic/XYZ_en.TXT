10 '****************************************************************************
20 '*                          Leszek Buczek, year 1991                        *
25 '* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
30 '*      Program for rotating a point around three axis: OX, OY and OZ.      *
40 '*  The core of the program are lines from 10000 to the end of the program. *
45 '*--------------------------------------------------------------------------*
50 '* Lines 1100 to 2420 are irrelevant to the operation of the program.       *
55 '* However, remember to enter the XPQ and YPQ variables - center of the     *
60 '* coordinate system and FQ - the unit length of all the axes in pixels.    *
65 '* For "SCREEN 9" the center of the screen is XPQ=320, YPQ=175 and          *
70 '* FQ is the best in a range from 20 to 80.                                 *
75 '****************************************************************************
100 KEY OFF
110 SCREEN 9
120 '
125 ' KOREKCJA means CORRECTION in English
130 ' For a monitor from year 1991, I had to adopt KOREKCJA=1.4 by expanding
140 ' the Y-unit so a circle became real circle, not a flattened ellipse.
150 KOREKCJA = 1.4       '* correction factor for image narrowing on the Y axis
160 '
170 ' Table of points for a small coordinate system in the lower-left corner
180 DIM UX(35),UY(35),UZ(35),XU(35),YU(35)
190 DIM IX(11),IY(11),IZ(11),XI(11),YI(11)
192 ' Mathematics constants - ready to use
194 E = 2.71828   ' Neper's number
196 PI = 3.141593 ' "pi" number
200 '
210 ' Declaration of graphic window boundaries in pixels - (350,175) is the center of the coordinate system
220 XX.MIN=130  '  <-- 350-220; on the X axis, the graph will be in the interval (XX.MIN+LESS; XX.MAX-LESS)...
230 XX.MAX=570  '  <-- 350+220; ...which gives for ZASIEG the number  ((XX.MAX-MNIEJ) - (XX.MIN+MNIEJ)) / 2				
240 YY.MIN=25   '  <-- 175-150; ZASIEG means RANGE in English
250 YY.MAX=325  '  <-- 175+150
260 MNIEJ = 100 '  maybe you need to increase this number little bit ?		
270 '
280 ' Declaration of the optional parameters (SPLASZCZ means FLATTEN in English)
290 SPLASZCZ = 1    ' flattening/lengthening graphics along the OY axis (1 - without this effect)
300 ZASIEG = 4      ' here means: x=(-4;4) i z=(-4;4)  <-- limit values of the function
310 ' Rotation angles around the axes OX, OY i OZ.  15,15,0 will give a similar result as in Excel or matplotlib in Python
320 AX = 15: AY = 15: AZ = 0
330 '***************************************************************************
340 '*                 Keyboard setting of graphics parameters                 *
350 '***************************************************************************
360 CLS
370 LOCATE 1,1: COLOR 15: INPUT "Choose the coordinate system: Left-handed [L], right-handed [any other key] ",UKLAD$
380 IF UKLAD$=CHR$(76) OR UKLAD$=CHR$(108) THEN U=1 ELSE U=-1
390 '
400 ' *** Flatten or lengthen the graph.  SPLASZCZ=1 neither flattens nor lengthens
405 ' SPLASZCZ=0.5 flattens the graph by a half; SPLASZCZ=2 lengthens the graph twice
410 ' P$, LP, P1$ i ZP$ are just local auxiliary variables used five times each
420 LOCATE 25,9: PRINT "       Flattening/lengthening the graph along the OY axis       ";
430 P$ = STR$(SPLASZCZ): LP = LEN(P$): P1$ = MID$(P$,2,LP-1)  ' remove the first blank character
440 LOCATE 2,1: PRINT USING "&"; "Flattening/elongation ["; P1$; "]:";: INPUT " ", ZP$
450 IF ZP$ <> "" THEN SPLASZCZ=VAL(ZP$)     ' overwrites the default or last typed value
460 '
500 '*** The actual range of X and Z values around the origin of the coordinate system for the function
503 ' ZASIEG=n is the range of values X=(-n;n) and at the same time Z=(-n;n)
506 ' In pixels, it will always be X=(XX.MIN + MNIEJ;XX.MAX - MNIEJ) if there is no rotation of the system
510 ' P$, LP, P1$ and ZP$ are just local auxiliary variables (used here for the second time)
520 LOCATE 25,9: PRINT "Example: Range = 10 means limit values X=(-10;10) and Z=(-10;10)";
530 P$ = STR$(ZASIEG): LP = LEN(P$): P1$ = MID$(P$,2,LP-1)  ' remove the first blank character
540 LOCATE 3,1: PRINT USING "&"; "Range ["; P1$; "]:";: INPUT " ", ZP$
550 IF ZP$ <> "" THEN ZASIEG=VAL(ZP$)     ' overwrites the default or last typed value
560 ' How many pixels is in the unit of the length? If the RANGE corresponds to the number
570 '   ((XX.MAX-MNIEJ) - (XX.MIN+MNIEJ)) / 2  of pixels then the unit has FQ.W pixels:
580 FQ.W = (((XX.MAX-MNIEJ) - (XX.MIN+MNIEJ)) / 2 ) / ZASIEG  ' and the line spacing:
590 KROK = ZASIEG / 20 ' <-- STEP of the loop FOR  so there are 40 lines between (-ZASIEG; ZASIEG) that makes 2*ZASIEG (ZASIEG means: RANGE in English)
595 '
600 ' *** Rotation angle around the OX axis with the direction of chosen the coordinate system
610 ' P$, LP, P1$ and ZP$ are just local auxiliary variables (used here for the third time)
620 LOCATE 25,9: PRINT "      Rotation angle around OX axis in degrees (-360;360)       ";
630 AX1 = AX: IF AX1 >= 0 THEN P$ = STR$(AX1): LP = LEN(P$): P1$ = MID$(P$,2,LP-1) ELSE P1$ = STR$(AX1) ' remove the first blank character for a non-negative number
640 LOCATE 4,1:PRINT USING "&"; "Angle OX ["; P1$; CHR$(248); "]:";: INPUT " ", ZP$  ' Rotation angle around OX axis
650 IF ZP$ <> "" THEN AX1=VAL(ZP$): AX=AX1    ' overwrites the default or last typed value
660 IF AX1>360 OR AX1<-360 THEN LOCATE 4,1: PRINT SPC(25): GOTO 640
670 '
700 ' *** Rotation angle around the OY axis with the direction of chosen the coordinate system
710 ' P$, LP, P1$ and ZP$ are just local auxiliary variables (used here for the fourth time)
720 LOCATE 25,9: PRINT "      Rotation angle around OY axis in degrees (-360;360)       ";
730 AY1 = AY: IF AY1 >= 0 THEN P$ = STR$(AY1): LP = LEN(P$): P1$ = MID$(P$,2,LP-1) ELSE P1$ = STR$(AY1)  ' remove the first blank character for a non-negative number
740 LOCATE 5,1:PRINT USING "&"; "Angle OY ["; P1$; CHR$(248); "]:";: INPUT " ", ZP$  ' Rotation angle around OY axis
750 IF ZP$ <> "" THEN AY1=VAL(ZP$): AY=AY1    ' overwrites the default or last typed value
760 IF AY1>360 OR AY1<-360 THEN LOCATE 5,1: PRINT SPC(25): GOTO 740
770 '
800 ' *** Rotation angle around the OZ axis with the direction of chosen the coordinate system
810 ' P$, LP, P1$ and ZP$ are just local auxiliary variables (used here for the fifth time)
820 LOCATE 25,9: PRINT "      Rotation angle around OZ axis in degrees (-360;360)       ";
830 AZ1 = AZ: IF AZ1 >= 0 THEN P$ = STR$(AZ1): LP = LEN(P$): P1$ = MID$(P$,2,LP-1) ELSE P1$ = STR$(AZ1)  ' remove the first blank character for a non-negative number
840 LOCATE 6,1:PRINT USING "&"; "Angle OZ ["; P1$; CHR$(248); "]:";: INPUT " ", ZP$  ' Rotation angle around OZ axis
850 IF ZP$ <> "" THEN AZ1=VAL(ZP$): AZ=AZ1    ' overwrites the default or last typed value
860 IF AZ1>360 OR AZ1<-360 THEN LOCATE 6,1: PRINT SPC(25): GOTO 840
870 LOCATE 25,9: PRINT "                        Please wait ...                         ";
880 '
1000 ' *** Preliminary calculations
1010 AX1=AX1*U: AY1=AY1*(-U): AZ1=AZ1*U
1020 AXQ=AX1*3.141593/180            ' Conversion degrees to radians
1030 AYQ=AY1*3.141593/180            ' Added line for rotation around the OY axis
1040 AZQ=AZ1*3.141593/180            ' Added line for rotation around the OZ axis
1050 D1Q=1-COS(AXQ)
1060 '
1100 '***************************************************************************
1110 '* Drawing a small coordinate system in the lower-left corner of the       *
1120 '* screen. To change its size, you need to change the value of the FQ      *
1130 '* variable (F for factor) without forgetting to move the origin of the    *
1140 '* coordinate system to place the drawing in the appropriate part of the   *
1150 '* screen: change the value of XPQ (X coordinate of the origin) and change *
1160 '* the value of YPQ (Y coordinate of the origin) - the very first line     *
1165 '* under this text.                                                        *
1167 '* Pixel (X,Y)=(0,0) is in the most upper-left corner of the screen.       * 
1170 '* Lines from 1200 to 1560 enter data into this drawing.                   *
1180 '* Lines from 1600 to 1650 give data to and take out data from a subroutine.
1190 '* Lines from 1700 to 1910 are a drawing procedure.                        *
1195 '***************************************************************************
1200 XPQ=70:YPQ=290:FQ=1.5            ' * here: the unit is equal to 1.5 pixels
1210 UX(0)=15:UY(0)=0:UZ(0)=-3
1220 UX(1)=25:UY(1)=0:UZ(1)=3
1230 UX(2)=15:UY(2)=0:UZ(2)=3
1240 UX(3)=25:UY(3)=0:UZ(3)=-3
1250 UX(4)=10:UY(4)=0:UZ(4)=0
1260 UX(5)=10:UY(5)=0:UZ(5)=5
1270 UX(6)=25:UY(6)=0:UZ(6)=5
1280 UX(7)=25:UY(7)=0:UZ(7)=8
1290 UX(8)=32:UY(8)=0:UZ(8)=0
1300 UX(9)=25:UY(9)=0:UZ(9)=-8
1310 UX(10)=25:UY(10)=0:UZ(10)=-5
1320 UX(11)=10:UY(11)=0:UZ(11)=-5
1330 UX(12)=0:UY(12)=15:UZ(12)=0
1340 UX(13)=0:UY(13)=20:UZ(13)=0
1350 UX(14)=0:UY(14)=25:UZ(14)=-3
1360 UX(15)=0:UY(15)=25:UZ(15)=3
1370 UX(16)=0:UY(16)=10:UZ(16)=0
1380 UX(17)=0:UY(17)=10:UZ(17)=-5
1390 UX(18)=0:UY(18)=25:UZ(18)=-5
1400 UX(19)=0:UY(19)=25:UZ(19)=-8
1410 UX(20)=0:UY(20)=32:UZ(20)=0
1420 UX(21)=0:UY(21)=25:UZ(21)=8
1430 UX(22)=0:UY(22)=25:UZ(22)=5
1440 UX(23)=0:UY(23)=10:UZ(23)=5
1450 UX(24)=-3:UY(24)=0:UZ(24)=15
1460 UX(25)=3:UY(25)=0:UZ(25)=15
1470 UX(26)=-3:UY(26)=0:UZ(26)=25
1480 UX(27)=3:UY(27)=0:UZ(27)=25
1490 UX(28)=0:UY(28)=0:UZ(28)=10
1500 UX(29)=5:UY(29)=0:UZ(29)=10
1510 UX(30)=5:UY(30)=0:UZ(30)=25
1520 UX(31)=8:UY(31)=0:UZ(31)=25
1530 UX(32)=0:UY(32)=0:UZ(32)=32
1540 UX(33)=-8:UY(33)=0:UZ(33)=25
1550 UX(34)=-5:UY(34)=0:UZ(34)=25
1560 UX(35)=-5:UY(35)=0:UZ(35)=10
1570 '
1600 ' Prepare a 35-element array of screen points for a small coordinate system drawing
1610 FOR I=0 TO 35
1620   X=UX(I):Y=UY(I):Z=UZ(I)
1630   GOSUB 10000
1640   XU(I)=XX:YU(I)=YY
1650 NEXT I
1660 '
1700 ' Drawing a small coordinate system (in the lower-left corner of the screen)
1710 LINE(XU(0),YU(0))-(XU(1),YU(1))
1720 LINE(XU(2),YU(2))-(XU(3),YU(3))
1730 LINE(XPQ,YPQ)-(XU(4),YU(4))
1740 LINE -(XU(5),YU(5)):LINE -(XU(6),YU(6))
1750 LINE -(XU(7),YU(7)):LINE -(XU(8),YU(8))
1760 LINE -(XU(9),YU(9)):LINE -(XU(10),YU(10))
1770 LINE -(XU(11),YU(11)):LINE -(XU(4),YU(4))
1780 LINE(XU(12),YU(12))-(XU(13),YU(13)):LINE -(XU(14),YU(14))
1790 LINE(XU(13),YU(13))-(XU(15),YU(15))
1800 LINE(XPQ,YPQ)-(XU(16),YU(16))
1810 LINE -(XU(17),YU(17)):LINE -(XU(18),YU(18))
1820 LINE -(XU(19),YU(19)):LINE -(XU(20),YU(20))
1830 LINE -(XU(21),YU(21)):LINE -(XU(22),YU(22))
1840 LINE -(XU(23),YU(23)):LINE -(XU(16),YU(16))
1850 LINE(XU(24),YU(24))-(XU(25),YU(25))
1860 LINE -(XU(26),YU(26)):LINE -(XU(27),YU(27))
1870 LINE(XPQ,YPQ)-(XU(28),YU(28))
1880 LINE -(XU(29),YU(29)):LINE -(XU(30),YU(30))
1890 LINE -(XU(31),YU(31)):LINE -(XU(32),YU(32))
1900 LINE -(XU(33),YU(33)):LINE -(XU(34),YU(34))
1910 LINE -(XU(35),YU(35)):LINE -(XU(28),YU(28))
1920 '
2000 '***************************************************************************
2010 '* Drawing a coordinate system in the center of the screen.                *
2020 '* Lines from 2060 to 2180 enter data into this drawing.                   *
2030 '* Lines from 2200 to 2250 give data to and take out data from the subroutine.
2040 '* Lines from 2300 to 2420 are a drawing procedure.                        *
2050 '***************************************************************************
2060 XPQ=350:YPQ=175:FQ=1        ' XPQ,YPQ-coordinates of the origin (in pixels)
2070 IX(0)=-140:IY(0)=0:IZ(0)=0
2080 IX(1)=140:IY(1)=0:IZ(1)=0
2090 IX(2)=130:IY(2)=3:IZ(2)=0
2100 IX(3)=130:IY(3)=-3:IZ(3)=0
2110 IX(4)=0:IY(4)=-140:IZ(4)=0
2120 IX(5)=0:IY(5)=140:IZ(5)=0
2130 IX(6)=-3:IY(6)=130:IZ(6)=0
2140 IX(7)=3:IY(7)=130:IZ(7)=0
2150 IX(8)=0:IY(8)=0:IZ(8)=-140
2160 IX(9)=0:IY(9)=0:IZ(9)=140
2170 IX(10)=-3:IY(10)=0:IZ(10)=130
2180 IX(11)=3:IY(11)=0:IZ(11)=130
2190 '
2200 ' Prepare an 11-element array of screen points for the coordinate system axis in the center of the screen
2210 FOR I=0 TO 11
2220   X=IX(I):Y=IY(I):Z=IZ(I)
2230   GOSUB 10000
2240   XI(I)=XX:YI(I)=YY
2250 NEXT I
2260 '
2300 ' Draw the axes of the large coordinate system in the center of the screen
2310 LINE(XI(0),YI(0))-(XI(1),YI(1)),1:LINE -(XI(2),YI(2)),1
2320 LINE(XI(1),YI(1))-(XI(3),YI(3)),1
2330 X=CINT(XI(1)/8)+2:Y=CINT(YI(1)/14)+1
2340 LOCATE Y,X:PRINT "x"
2350 LINE(XI(4),YI(4))-(XI(5),YI(5)),2:LINE -(XI(6),YI(6)),2
2360 LINE(XI(5),YI(5))-(XI(7),YI(7)),2
2370 X=CINT(XI(5)/8)+2:Y=CINT(YI(5)/14)+1
2380 LOCATE Y,X:PRINT "y"
2390 LINE(XI(8),YI(8))-(XI(9),YI(9)),3:LINE -(XI(10),YI(10)),3
2400 LINE(XI(9),YI(9))-(XI(11),YI(11)),3
2410 X=CINT(XI(9)/8)+2:Y=CINT(YI(9)/14)+1
2420 LOCATE Y,X:PRINT "z"
2430 '
2500 '**************************************************************************
2510 '* The beginning of the procedure giving the true X,Y,Z coordinates.      *
2520 '* This procedure is to call the subprogram that calculates the position  *
2530 '* of individual points on a flat screen with numbers of coordinates as   *
2535 '* the output: XX and YY.                                                 *
2540 '* Calling the subroutine requires the expression: GOSUB 10000 .          *
2550 '**************************************************************************
2560 '*   An example of a formula for drawing a 3D function.  *
2570 '*   Lines from 3000 to 4190 are designed for this.      *
2580 '* Each such procedure must give to the subprogram the   *
2590 '* value of the variables X, Y and Z as the actual       *
2600 '* coordinates of a point in the coordinate system,      *
2610 '* entering with these variable names into the subroutine*
2620 '* with an instruction: GOSUB 10000 and take variables   *
2630 '* named XX and YY as the coordinates of the point on the*
2640 '* screen in pixels at the output of the subprogram,     *
2650 '* decide what to do with the numbers of XX and YY, e.g. *
2660 '* mark a point on the screen: PSET(XX,YY)  , connect    *
2670 '* this point with other previously remembered or        *
2680 '* anything else.                                        *
2690 '* If the subroutine that draws the axis were removed,   *
2700 '* specify in the first line XPQ and YPQ as the position *
2710 '* of the origin of the coordinate system in pixels for  *
2720 '* the SCREEN 9. Be sure to take the appropriate FQ      *
2730 '* value as the length of the unit of all three axes in  *
2740 '* pixels. Just FQ as FQ.W the program calculates itself.*
2750 '*********************************************************
3000 FQ=FQ.W    ' this amount of pixels on the screen is per unit length (for all three axes) and depends on the ZASIEG (RANGE)
3010 ' Draw chart lines - for 20 different X values, parallel to the XY plane
3020 ' K could be useful to check if there is a drawing at all
3030 BLAD = 0   ' right at the entrance to the loop we assume no mathematical error
3040 K=0        ' if after the process K=0, it is mean that no one point appeared on the screen
3050 FOR Z=-ZASIEG TO ZASIEG STEP KROK   ' Z is from -range to +range with interval KROK (means: step)
3055 ' STEP as KROK was calculated in such as way to give 20 different values of Z (20 lines)
3060   RYSUJ = 0  ' this is a potential starting point of the line so we do not draw the line at this moment
3070   FOR X=-ZASIEG TO ZASIEG STEP KROK   ' X is from -range to +range with interval KROK (means: step)
3080 '   --- Function equation Y=f(X,Z) ---
3090     GOSUB 12000
3100     IF BLAD = 1 THEN BLAD = 0: RYSUJ = 0: GOTO 3180  ' RYSUJ=0 (means: DRAW=0), it indicates: do not draw
3110     Y=Y*SPLASZCZ  ' flatten or stretch the chart along the OY axis (SPLASZCZ means FLATTEN in English)
3120 '   ---------------------------------
3130     GOSUB 10000
3140     IF XX<XX.MIN OR XX>XX.MAX OR YY<YY.MIN OR YY>YY.MAX THEN RYSUJ=0: GOTO 3180 ELSE IF RYSUJ=0 THEN RYSUJ=1: GOTO 3170  ' specify a point and prepare for drawing lines from this point
3150     K=1     ' an indicator that the image is not empty. This will no longer be in the next loop below
3160     LINE-(XX,YY),14:GOTO 3180  ' it must be RYSUJ=1 (means: DRAW=1) here, that is why: draw a short line
3170     PSET(XX,YY),14   ' it marks the point from which a short line ...
3180   NEXT X             ' ... can be drawn when previously it was RYSUJ=0
3190 NEXT Z
4000 '
4010 ' Draw lines transverse to lines already drawn - parallel to the ZY plane
4030 BLAD = 0   ' right at the entrance to the loop we assume no mathematical error
4050 FOR X=-ZASIEG TO ZASIEG STEP KROK  ' X is from -range to +range with interval KROK (means: step)
4055 ' STEP as KROK was calculated in such as way to give 20 different values of X (20 lines)
4060   RYSUJ = 0  ' this is a potential starting point of the line so we do not draw the line at this moment
4070   FOR Z=-ZASIEG TO ZASIEG STEP KROK  ' Z is from -range to +range with interval KROK (means: step)
4080 '   --- Function equation Y=f(X,Z) ---
4090   GOSUB 12000
4100     IF BLAD = 1 THEN BLAD = 0: RYSUJ = 0: GOTO 4180  ' RYSUJ=0 (means: DRAW=0), it indicates: do not draw
4110     Y=Y*SPLASZCZ      ' flatten or stretch the chart along the OY axis
4120 '   ---------------------------------
4130     GOSUB 10000
4140     IF XX<XX.MIN OR XX>XX.MAX OR YY<YY.MIN OR YY>YY.MAX THEN RYSUJ=0: GOTO 4180 ELSE IF RYSUJ=0 THEN RYSUJ=1: GOTO 4170  ' specify a point and prepare for drawing lines from this point
4160     LINE-(XX,YY),14:GOTO 4180 ' it must be RYSUJ=1 (means: DRAW=1) here, that is why: draw a short line
4170     PSET(XX,YY),14   ' it marks the point from which a short line ...
4180   NEXT Z             ' ... can be drawn when previously it was RYSUJ=0
4190 NEXT X
4200 '
9000 ' *** Information in the case of absence of a graph for the current options
9010 IF K = 0 THEN LOCATE 12,14: PRINT "No one graph point is found for the selected function";
9020 '
9030 ' *** Change the parameters of the same function - the letter either [O] or [o] - "O" for Options
9040 ' *** or abandon the program - any other key
9050 LOCATE 25,4: PRINT "Press [O] to change options of the same function,   [any other key] - exit";
9060 S$=INKEY$: IF S$="" THEN 9060
9070 IF S$=CHR$(79) OR S$=CHR$(111) THEN GOTO 360
9080 CLS:END
9090 '
9100 '
10000 '*************************************************************************
10002 '******************* Subprogram - core of the program ********************
10004 '*************************************************************************
10005 XQ=X:YQ=Y:ZQ=Z
10010 IF AZQ=0 OR SQR(XQ*XQ+YQ*YQ)<.000001 THEN 10110 '|----------------------|
10020 AAQ=SQR(XQ*XQ+YQ*YQ)                            '| Lines 10010 to 10100 |
10030 KZZQ=XQ/AAQ                                     '| refer to the rotation|
10040 IF KZZQ>=1 THEN KZZQ=0:GOTO 10080               '| around the OZ axis   |
10050 IF KZZQ<=-1 THEN KZZQ=3.141593:GOTO 10080       '| and inserted into a  |
10060 KZZQ=ATN(KZZQ/SQR(1-KZZQ*KZZQ))-1.570796        '| program called XY_PL.|
10070 IF YQ<0 THEN KZZQ=-KZZQ                         '| This caused the lines|
10080 KZZQ=KZZQ+AZQ                                   '| to move from No.     |
10090 XQ=AAQ*SIN(KZZQ+1.570796)                       '| 10010 up by 100.     |
10100 YQ=AAQ*COS(KZZQ+1.570796)                       '|----------------------|
10110 DQ=YQ*D1Q  '* DQ - lowering the center of the circle after rotation by AX
10120 YQ=YQ-DQ
10130 AQ=SQR(XQ*XQ+ZQ*ZQ) '* AQ - diameter of the rotated circle, length of the 
10140 IF AQ<.0000001 THEN XXQ=XPQ:YRQ=YQ:GOTO 10270 '* large axis of the 
10150 BQ=AQ*SIN(AXQ)     'fictitious ellipse, BQ - the length of the small axis
10155 ' Beginning of the calculation of the angle between the plane YZ and the semiaxial containing the point (X,Y) of the ellipse
10160 KZQ=XQ/AQ
10170 IF KZQ>=1 THEN KZQ=0:GOTO 10220
10180 IF KZQ<=-1 THEN KZQ=3.141593:GOTO 10220
10190 KZQ=ATN(KZQ/SQR(1-KZQ*KZQ))-1.570796  '* KZQ - here: the above mentioned angle*
10200 IF ZQ>0 THEN KZQ=-KZQ
10220 IF AYQ=0 THEN XRQ=XQ:GOTO 10250
10230 KZQ=KZQ+AYQ
10240 XRQ=AQ*COS(KZQ)
10250 XXQ=CINT(XPQ+XRQ*KOREKCJA*FQ)   '* pixel X coordinate of a point on the screen*
10260 YRQ=YQ+BQ*SIN(KZQ)
10270 YYQ=CINT(YPQ-YRQ*FQ)     '* pixel Y coordinate of a point on the screen *
10280 XX=XXQ:YY=YYQ            '* KOREKCJA - correction factor for image narrowing *
10300 RETURN                   '* FQ - unit of three axis of the system in pixels *
10310 '
11000 ' --- Notes on the function graph Y=f(X,Z) ---
11010 ' Error handling (ON ERROR GOTO...) does not work properly in GWBasic
11020 ' Therefore, it is necessary to precede the line of writing the function
11030 ' with conditions that prevent the entry into operations mathematically
11040 ' forbidden with the instruction:
11045 '     IF ( condition to avoid ) THEN BLAD=1: GOTO 14050
11050 ' Example:
11060 '  12080 IF (X-2*Z <= 0) THEN BLAD=1: GOTO 14050  ' ignore drawing
11070 '  12090 IF (X+LOG(X-2*Z) < 0) THEN BLAD=1: GOTO 14050 ' ignore drawing
11080 '  13000 Y = 2+SQR(X+LOG(X-2*Z))     ' <-- function Y=f(X,Z)
12000 ' --- Function equation Y=f(X,Z) ---
12980 V=-(X*X+Z*Z)       '<-- here: will always be a feasible mathematical operation
12990 VV=-((X-2)*X+(Z-.5)*Z) '<-- here: will always be a feasible mathematical operation
13000 Y=5*EXP(V)-2*EXP(VV) '<-- here: it may sometimes be impossible to perform a mathematical operation
14000 ' ---------------------------------
14010 ' error procedure (unworkable mathematical operation)
14020 ON ERROR GOTO 14040
14030 GOTO 14050
14040 IF ERL = 13000 THEN BLAD = 1: RESUME 14050
14050 RETURN
